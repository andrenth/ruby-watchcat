                              Ruby/Watchcat
                              ~~~~~~~~~~~~~

0. INTRODUCTION
1. REQUIREMENTS
2. INSTALLATION
3. USAGE
4. LICENSE
5. AUTHOR
6. REFERENCES


0. Introduction
===============

Ruby/Watchcat is an extension for the Ruby programming language for the
development of watchcatd-aware applications.

Watchcatd is a watchdog-like daemon in the sense that it takes actions
in situations where a machine is under heavy load and/or unresponsive.
However, watchcatd isn't as drastic as the usual watchdog systems, which
reboot the machine. Instead, all it does is sending a signal to a
registered process (which by default is SIGKILL) if the process doesn't
send it a heartbeat before a user-specified timeout.

Ruby/Watchcatd allows you to register ruby applications with watchcatd.


1. REQUIREMENTS
===============

Ruby/Watchcatd was tested with Ruby version 1.8.4 and requires watchcatd
version 1.1 and libwcat version 1.0 to be installed (see REFERENCES
below).


2. INSTALLATION
===============

To install Ruby/Watchcat by hand, follow the procedure below:

$ tar -zxvf ruby-watchcat-1.0.0.tar.gz
$ cd ruby-watchcat-1.0.0/ext
$ ruby extconf.rb
$ make
# make install

You can also install straight from rubygems

# gem install ruby-watchcat


3. USAGE
========

The watchcat API is very simple. Class Watchcat has three methods:

  new: Creates a new Watchcat object. If a block is given the cat is
       yielded, else it's returned. A hash can be passed as a parameter
       to the method. Following are the accepted keys and their
       description:

         :timeout (default: 60): if watchcatd doesn't receive a
         heartbeat after this period (in seconds), it'll signal the
         process.

         :signal (default: 9): defines which signal will be sent
         to the process after the timeout expires. Can be a string like
         'HUP' or 'SIGHUP' or an integer like 9.

         :info (default: nil): should be a string which is added to the
         log generated by watchcatd when it signals a process.

  heartbeat: Sends a heartbeat to watchcatd.

  close: Closes the cat object. If you passed a block to #new, it will
  be closed automatically.


4. LICENSE
==========

Copyright (c) 2006 Andre Nathan <andre@digirati.com.br>

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


5. AUTHOR
=========

Ruby/Watchcat was developed by Andre Nathan.


6. REFERENCES
=============

* Ruby/Watchcat homepage:
  http://oss.digirati.com.br/ruby-watchcat/

* Watchcatd and libwcat:
  http://oss.digirati.com.br/watchcatd/
